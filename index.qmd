---
title: "Estadísticas de registros de presencia de félidos en cantones de Costa Rica"
format: 
  html:
    page-layout: custom
    lang: es
    theme: litera    
    margin-top: 40px
    margin-left: 40px
    margin-bottom: 15px        
    margin-right: 15px
server: shiny
---

```{r}
#| label: carga-paquetes
#| context: setup
#| warning: false
#| message: false

# Carga de paquetes
library(tidyverse)
library(sf)
library(DT)
library(plotly)
library(leaflet)
library(leaflet.extras)
library(leafem)
library(viridisLite)
```

```{r}
#| label: carga-datos
#| context: data

# Carga de datos de registros de presencia
felidos <-
  st_read(
    dsn = "felidos.csv",
    options = c(
      "X_POSSIBLE_NAMES=decimalLongitude", # columna de longitud decimal
      "Y_POSSIBLE_NAMES=decimalLatitude"   # columna de latitud decimal
    ),
    quiet = TRUE
  )

# Asignación del CRS WGS84
st_crs(felidos) <- 4326

# Carga de datos de cantones
cantones <- 
  st_read(
    dsn = "cantones_2020_simp_10m.geojson",
    quiet = TRUE
  ) |>
  st_transform(4326)


# Unión espacial de registros de presencia de félidos y cantones.
# Este es el conjunto de datos que va a filtrarse
# con los criterios que especifique el usuario.
felidos_union_cantones <-
  st_join(
    x = felidos,
    y = dplyr::select(cantones, canton),
    join = st_within
  )
```

```{r}
#| label: panel-widgets-entrada
#| panel: sidebar

# Lista ordenada de especies
# con un elemento adicional = "Todas"
lista_especies <- unique(felidos_union_cantones$species)
lista_especies <- sort(lista_especies)
lista_especies <- c("Todas", lista_especies)

# Widget de lista de selección de especies
selectInput(
  inputId = "especie",      # identificador del widget
  label = "Especie",        # etiqueta de la lista
  choices = lista_especies, # lista de opciones para seleccionar de la lista
  selected = "Todas"        # opción seleccionada por defecto
)
```

```{r}
#| label: panel-widgets-salida
#| panel: center

h3("Gráfico de cantidad de registros de presencia en cantones")
HTML("<p>")

# Salida de gráfico interactivo
plotlyOutput(
	outputId =  "grafico" # identificador del widget
)
```

```{r}
#| label: servidor
#| context: server

# Función reactiva para filtrar los registros de presencia de félidos unidos con cantones
# de acuerdo con los filtros especificados por el usuario
filtrar_felidos_union_cantones <- reactive({
  # Valor inicial del objeto que va a retornarse
  felidos_union_cantones_filtrados <- felidos_union_cantones
  
  # Se realiza el filtro por especie, solamente si el usario ha seleccionado 
  # una opción diferente a "Todas" en la lista de selección de especies
  if (input$especie != "Todas") {
    felidos_union_cantones_filtrados <-
      felidos_union_cantones_filtrados |>
      filter(species == input$especie)
  }

  return(felidos_union_cantones_filtrados)
}) 

# Generación de gráfico interactivo Plotly
output$grafico <- renderPlotly({
	# Filtrado del conjunto de datos
  felidos_union_cantones <- filtrar_felidos_union_cantones()
  
	# Cálculo de la cantidad de registros de presencia en cantones
	cantidad_registros_cantones <-
	  felidos_union_cantones |>
	  st_drop_geometry() |>
	  group_by(canton) |>
	  summarize(cantidad_registros = n()) |> # conteo de los registros de presencia (puntos)
		drop_na(canton) # eliminación de los registros en cantón "nulo" (los que caen en el mar)
  
  # Gráfico ggplot2
	grafico_ggplot2 <-
	  cantidad_registros_cantones |>
	  ggplot(
	    aes(
	      x = reorder(canton, -cantidad_registros), 
	      y = cantidad_registros
	    )
	  ) +
	  geom_col(
	    aes(
	      text = paste0(
	        "Cantón", ": ", canton, "\n",
	        "Cantidad de registros: ", cantidad_registros
	      )
	    )    
	  ) +
	  xlab("Cantón") +
	  ylab("Cantidad de registros de presencia") +  
	  theme_bw() +
	  theme(axis.text.x = element_text(angle = 45, hjust = 1))
	
# Gráfico plotly
ggplotly(grafico_ggplot2, tooltip = "text") |> 
  config(locale = 'es')	
})
```